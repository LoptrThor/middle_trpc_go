// Code generated by MockGen. DO NOT EDIT.
// Source: stub/github.com/LoptrThor/middle_trpc_go/middle_proto.trpc.go

// Package middle_trpc_go is a generated GoMock package.
package middle_trpc_go

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockAccountService is a mock of AccountService interface.
type MockAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceMockRecorder
}

// MockAccountServiceMockRecorder is the mock recorder for MockAccountService.
type MockAccountServiceMockRecorder struct {
	mock *MockAccountService
}

// NewMockAccountService creates a new mock instance.
func NewMockAccountService(ctrl *gomock.Controller) *MockAccountService {
	mock := &MockAccountService{ctrl: ctrl}
	mock.recorder = &MockAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountService) EXPECT() *MockAccountServiceMockRecorder {
	return m.recorder
}

// OpenCheck mocks base method.
func (m *MockAccountService) OpenCheck(ctx context.Context, req *Request) (*Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenCheck", ctx, req)
	ret0, _ := ret[0].(*Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenCheck indicates an expected call of OpenCheck.
func (mr *MockAccountServiceMockRecorder) OpenCheck(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenCheck", reflect.TypeOf((*MockAccountService)(nil).OpenCheck), ctx, req)
}

// MockAccountClientProxy is a mock of AccountClientProxy interface.
type MockAccountClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockAccountClientProxyMockRecorder
}

// MockAccountClientProxyMockRecorder is the mock recorder for MockAccountClientProxy.
type MockAccountClientProxyMockRecorder struct {
	mock *MockAccountClientProxy
}

// NewMockAccountClientProxy creates a new mock instance.
func NewMockAccountClientProxy(ctrl *gomock.Controller) *MockAccountClientProxy {
	mock := &MockAccountClientProxy{ctrl: ctrl}
	mock.recorder = &MockAccountClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountClientProxy) EXPECT() *MockAccountClientProxyMockRecorder {
	return m.recorder
}

// OpenCheck mocks base method.
func (m *MockAccountClientProxy) OpenCheck(ctx context.Context, req *Request, opts ...client.Option) (*Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OpenCheck", varargs...)
	ret0, _ := ret[0].(*Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenCheck indicates an expected call of OpenCheck.
func (mr *MockAccountClientProxyMockRecorder) OpenCheck(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenCheck", reflect.TypeOf((*MockAccountClientProxy)(nil).OpenCheck), varargs...)
}
