// Code generated by trpc-go/trpc-cmdline v1.0.7. DO NOT EDIT.
// source: middle_proto.proto

package middle_trpc_go

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// AccountService defines service.
type AccountService interface {
	OpenCheck(ctx context.Context, req *Request) (*Reply, error) // @alias=/account/OpenCheck
}

func AccountService_OpenCheck_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &Request{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(AccountService).OpenCheck(ctx, reqbody.(*Request))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// AccountServer_ServiceDesc descriptor for server.RegisterService.
var AccountServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.app.server.Account",
	HandlerType: ((*AccountService)(nil)),
	Methods: []server.Method{
		{
			Name: "/trpc.app.server.Account/OpenCheck",
			Func: AccountService_OpenCheck_Handler,
		},
	},
}

// RegisterAccountService registers service.
func RegisterAccountService(s server.Service, svr AccountService) {
	if err := s.Register(&AccountServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("Account register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedAccount struct{}

func (s *UnimplementedAccount) OpenCheck(ctx context.Context, req *Request) (*Reply, error) {
	return nil, errors.New("rpc OpenCheck of service Account is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// AccountClientProxy defines service client proxy
type AccountClientProxy interface {
	OpenCheck(ctx context.Context, req *Request, opts ...client.Option) (rsp *Reply, err error) // @alias=/account/OpenCheck
}

type AccountClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewAccountClientProxy = func(opts ...client.Option) AccountClientProxy {
	return &AccountClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *AccountClientProxyImpl) OpenCheck(ctx context.Context, req *Request, opts ...client.Option) (*Reply, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.app.server.Account/OpenCheck")
	msg.WithCalleeServiceName(AccountServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("app")
	msg.WithCalleeServer("server")
	msg.WithCalleeService("Account")
	msg.WithCalleeMethod("OpenCheck")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &Reply{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
